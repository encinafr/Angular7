      private string CalcularServiciosDisponibles
        {
            get
            {
                return @"
USE [FLETALO]
GO
/****** Object:  StoredProcedure [Flete].[sp_CalcularServiciosDisponibles]    Script Date: 18/10/2019 12:06:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**
* Calcula los servicios que el usuario podrá filtrar
*/

ALTER PROCEDURE [Flete].[sp_CalcularServiciosDisponibles]
	@Pisos Decimal,
	@Horas Decimal,
	@ZonaDesde BIGINT,
	@ZonaHasta BIGINT,
	@OrderBy NVARCHAR(100),
	@MaxTotal DECIMAL,
	@MinTotal DECIMAL,
	@Offset INTEGER,
	@Take INTEGER,
	@Horario int,
    @ServicioBase Flete.ServicioAFiltrarTableType READONLY,
    @ServiciosAdicionales Flete.ServicioAFiltrarTableType READONLY
AS
BEGIN
	SELECT CALCULOS.*, f.Name AS FleteName,f.[CarefulCalification] as CarefulCalificationFlete,f.[PuntualityCalification] as PuntualityCalificationFlete, fs.Name as ServicioName, 
	fs.[Description], ad.[CityName] as FleteCity, f.[Calification], f.[CalificationCount],f.[CarefulCalification] as CarefulCalificationService, 
	fs.[PuntualityCalification] as PuntualityCalificationService,fs.[HoraMinima] 
		FROM (SELECT FleteServicioId, TotalBase, 
			-- La suma de los adicionales recién se hace acá ya que deben multiplicarse por cada servicio base ofrecido
			ISNULL(SUM(ISNULL(TotalAdicionales, 0.0)), 0.0) AS TotalAdicionales,
			ISNULL(TotalBase + SUM(ISNULL(TotalAdicionales, 0.0)), 0.0) AS Total
			    FROM (
		-- Costo del servicio base
		SELECT BASE.FleteId, BASE.FleteServicioId, Adicionales.IdCosto as IdCostoAdicional, 
			Base.TotalBase, 
			(0.5 * ((Adicionales.Total + Adicionales.PrecioMinimo) + ABS(Adicionales.Total - Adicionales.PrecioMinimo))) as TotalAdicionales 
			FROM (
				SELECT FleteId, FleteServicioId, SUM(ISNULL(TotalBase, 0.0)) as TotalBase FROM (
					SELECT FleteId, FleteServicioId, (0.5 * ((Total + PrecioMinimo) + ABS(Total - PrecioMinimo))) as TotalBase FROM (
						SELECT fs.FleteId, FleteServicioId, c.Id as IdCosto,
						PRECIO *
							-- Suma de todos los multiplicadores, ya que si da 0, no debe hacer ninguna cuenta
						CAST((CalcularPorUnidad | CalcularPorHora | CalcularPorPisoEscalera) AS INTEGER) *
								((0.5 * ((isp1.Cantidad + UnidadMinima) + ABS(isp1.Cantidad - UnidadMinima))) * CalcularPorUnidad + CAST(CalcularPorUnidad ^ 1 As INTEGER)) *
								((0.5 * ((@Horas + c.HoraMinima) + ABS(@Horas - c.HoraMinima))) * CalcularPorHora + CAST(CalcularPorHora ^ 1 As INTEGER)) *
								(@PISOS * CalcularPorPisoEscalera + CAST(CalcularPorPisoEscalera ^ 1 As INTEGER)) AS Total,
								PrecioMinimo
						    FROM Flete.FleteServicio fs
						-- Hago Inner Join porque tiene que tener un costo mínimo
						INNER JOIN Flete.Costo c ON fs.Id = c.FleteServicioId
						INNER JOIN @ServicioBase isp1 ON fs.ServicioId = isp1.ServicioId -- InputServicioPrincipal
					) BASE_CALCULOS
				) BASE_CALCULOS2
				-- Se hace este group by porque sino, la tabla de Costos hacía repetir los costos adicionales
				GROUP BY BASE_CALCULOS2.FleteId, BASE_CALCULOS2.FleteServicioId
			) BASE

			-- Left join porque puede que no existan costos adicionales
			LEFT JOIN 
			(
				SELECT fs.FleteId, FleteServicioId, c.Id as IdCosto,
				PRECIO *
					-- Suma de todos los multiplicadores, ya que si da 0, no debe hacer ninguna cuenta
				CAST((CalcularPorUnidad | CalcularPorHora | CalcularPorPisoEscalera) AS INTEGER) *
						((0.5 * ((isp2.Cantidad + UnidadMinima) + ABS(isp2.Cantidad - UnidadMinima))) * CalcularPorUnidad + CAST(CalcularPorUnidad ^ 1 As INTEGER)) *
						((0.5 * ((@Horas + c.HoraMinima) + ABS(@Horas - c.HoraMinima))) * CalcularPorHora + CAST(CalcularPorHora ^ 1 As INTEGER)) *
						(@PISOS * CalcularPorPisoEscalera + CAST(CalcularPorPisoEscalera ^ 1 As INTEGER)) AS Total,
						PrecioMinimo
				    FROM Flete.FleteServicio fs
				INNER JOIN Flete.Costo c ON fs.Id = c.FleteServicioId
				INNER JOIN  @ServiciosAdicionales isp2 ON fs.ServicioId = isp2.ServicioId -- InputServicioAdicional
			) Adicionales
			ON BASE.FleteId = Adicionales.FleteId
		) COSTOS_CALCULADOS
		Group By COSTOS_CALCULADOS.FleteServicioId, COSTOS_CALCULADOS.TotalBase
	) CALCULOS
	INNER JOIN Flete.FleteServicio fs ON CALCULOS.FleteServicioId = fs.Id
		LEFT JOIN Flete.ImagenFleteServicio ifs ON ifs.FleteServicioId = fs.Id
	INNER JOIN [FLETALO].[Flete].[Flete]f ON fs.FleteId = f.Id
	INNER JOIN Location.Address ad ON f.AddressId = ad.Id
	WHERE
		(@MaxTotal IS NULL OR Total <= @MaxTotal)
		AND
		(@MinTotal IS NULL OR Total >= @MinTotal)
		-- Debe existir en la zona
		AND EXISTS (SELECT fz.CityId FROM Flete.FleteZona fz WHERE fz.CityId = @ZonaDesde AND fz.FleteId = f.Id)
		AND EXISTS (SELECT fz.CityId FROM Flete.FleteZona fz WHERE fz.CityId = @ZonaHasta AND fz.FleteId = f.Id)
		AND EXISTS (select top 1 1 
					from Flete.FleteHorario fh 
					where fh.FleteId = f.Id
						    and fh.IsDeleted = 0
						    and (@Horario = 1 or (@Horario <> 1 and fh.HorarioId = @Horario)))
	ORDER BY
		CASE WHEN @OrderBy = 'Total' THEN Total END,
		CASE WHEN @OrderBy = 'Total DESC' THEN Total END DESC,
		CASE WHEN @OrderBy = 'FleteServicioId' THEN CALCULOS.FleteServicioId END,
		CASE WHEN @OrderBy = 'FleteServicioId DESC' THEN CALCULOS.FleteServicioId END DESC,
		CASE WHEN @OrderBy = 'Calification' THEN fs.Calification END,
		CASE WHEN @OrderBy = 'Calification DESC' THEN fs.Calification END DESC
	OFFSET @Offset ROWS FETCH NEXT @Take ROWS ONLY
 		
END";
            }
        }


        private string DowCalcularServiciosDisponibles
        {
            get
            {
                return @"
USE [Fletalo]
GO
/****** Object:  StoredProcedure [Flete].[sp_CalcularServiciosDisponibles]    Script Date: 18/10/2019 14:16:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**
* Calcula los servicios que el usuario podrá filtrar
*/

ALTER PROCEDURE [Flete].[sp_CalcularServiciosDisponibles]
	@Pisos Decimal,
	@Horas Decimal,
	@ZonaDesde BIGINT,
	@ZonaHasta BIGINT,
	@OrderBy NVARCHAR(100),
	@MaxTotal DECIMAL,
	@MinTotal DECIMAL,
	@Offset INTEGER,
	@Take INTEGER,
	@Horario int,
    @ServicioBase Flete.ServicioAFiltrarTableType READONLY,
    @ServiciosAdicionales Flete.ServicioAFiltrarTableType READONLY
AS
BEGIN
	SELECT CALCULOS.*, f.Name AS FleteName, fs.Name as ServicioName, fs.[Description], ad.[CityName] as FleteCity, fs.[Calification], fs.[CalificationCount], fs.[HoraMinima] FROM (
		SELECT FleteServicioId, 
			TotalBase, 
			-- La suma de los adicionales recién se hace acá ya que deben multiplicarse por cada servicio base ofrecido
			ISNULL(SUM(ISNULL(TotalAdicionales, 0.0)), 0.0) AS TotalAdicionales,
			ISNULL(TotalBase + SUM(ISNULL(TotalAdicionales, 0.0)), 0.0) AS Total
			    FROM
		(
		-- Costo del servicio base
		SELECT BASE.FleteId, BASE.FleteServicioId, Adicionales.IdCosto as IdCostoAdicional, 
			Base.TotalBase, 
			(0.5 * ((Adicionales.Total + Adicionales.PrecioMinimo) + ABS(Adicionales.Total - Adicionales.PrecioMinimo))) as TotalAdicionales 
			FROM (
				SELECT FleteId, FleteServicioId, SUM(ISNULL(TotalBase, 0.0)) as TotalBase FROM (
					SELECT FleteId, FleteServicioId, (0.5 * ((Total + PrecioMinimo) + ABS(Total - PrecioMinimo))) as TotalBase FROM (
						SELECT fs.FleteId, FleteServicioId, c.Id as IdCosto,
						PRECIO *
							-- Suma de todos los multiplicadores, ya que si da 0, no debe hacer ninguna cuenta
						CAST((CalcularPorUnidad | CalcularPorHora | CalcularPorPisoEscalera) AS INTEGER) *
								((0.5 * ((isp1.Cantidad + UnidadMinima) + ABS(isp1.Cantidad - UnidadMinima))) * CalcularPorUnidad + CAST(CalcularPorUnidad ^ 1 As INTEGER)) *
								((0.5 * ((@Horas + c.HoraMinima) + ABS(@Horas - c.HoraMinima))) * CalcularPorHora + CAST(CalcularPorHora ^ 1 As INTEGER)) *
								(@PISOS * CalcularPorPisoEscalera + CAST(CalcularPorPisoEscalera ^ 1 As INTEGER)) AS Total,
								PrecioMinimo
						    FROM Flete.FleteServicio fs
						-- Hago Inner Join porque tiene que tener un costo mínimo
						INNER JOIN Flete.Costo c ON fs.Id = c.FleteServicioId
						INNER JOIN @ServicioBase isp1 ON fs.ServicioId = isp1.ServicioId -- InputServicioPrincipal
					) BASE_CALCULOS
				) BASE_CALCULOS2
				-- Se hace este group by porque sino, la tabla de Costos hacía repetir los costos adicionales
				GROUP BY BASE_CALCULOS2.FleteId, BASE_CALCULOS2.FleteServicioId
			) BASE

			-- Left join porque puede que no existan costos adicionales
			LEFT JOIN 
			(
				SELECT fs.FleteId, FleteServicioId, c.Id as IdCosto,
				PRECIO *
					-- Suma de todos los multiplicadores, ya que si da 0, no debe hacer ninguna cuenta
				CAST((CalcularPorUnidad | CalcularPorHora | CalcularPorPisoEscalera) AS INTEGER) *
						((0.5 * ((isp2.Cantidad + UnidadMinima) + ABS(isp2.Cantidad - UnidadMinima))) * CalcularPorUnidad + CAST(CalcularPorUnidad ^ 1 As INTEGER)) *
						((0.5 * ((@Horas + c.HoraMinima) + ABS(@Horas - c.HoraMinima))) * CalcularPorHora + CAST(CalcularPorHora ^ 1 As INTEGER)) *
						(@PISOS * CalcularPorPisoEscalera + CAST(CalcularPorPisoEscalera ^ 1 As INTEGER)) AS Total,
						PrecioMinimo
				    FROM Flete.FleteServicio fs
				INNER JOIN Flete.Costo c ON fs.Id = c.FleteServicioId
				INNER JOIN  @ServiciosAdicionales isp2 ON fs.ServicioId = isp2.ServicioId -- InputServicioAdicional
			) Adicionales
			ON BASE.FleteId = Adicionales.FleteId
		) COSTOS_CALCULADOS
		Group By COSTOS_CALCULADOS.FleteServicioId, COSTOS_CALCULADOS.TotalBase
	) CALCULOS
	INNER JOIN Flete.FleteServicio fs ON CALCULOS.FleteServicioId = fs.Id
		LEFT JOIN Flete.ImagenFleteServicio ifs ON ifs.FleteServicioId = fs.Id
	INNER JOIN Flete.Flete f ON fs.FleteId = f.Id
	INNER JOIN Location.Address ad ON f.AddressId = ad.Id
	WHERE
		(@MaxTotal IS NULL OR Total <= @MaxTotal)
		AND
		(@MinTotal IS NULL OR Total >= @MinTotal)
		-- Debe existir en la zona
		AND EXISTS (SELECT fz.CityId FROM Flete.FleteZona fz WHERE fz.CityId = @ZonaDesde AND fz.FleteId = f.Id)
		AND EXISTS (SELECT fz.CityId FROM Flete.FleteZona fz WHERE fz.CityId = @ZonaHasta AND fz.FleteId = f.Id)
		AND EXISTS (select top 1 1 
					from Flete.FleteHorario fh 
					where fh.FleteId = f.Id
						    and fh.IsDeleted = 0
						    and (@Horario = 1 or (@Horario <> 1 and fh.HorarioId = @Horario)))
	ORDER BY
		CASE WHEN @OrderBy = 'Total' THEN Total END,
		CASE WHEN @OrderBy = 'Total DESC' THEN Total END DESC,
		CASE WHEN @OrderBy = 'FleteServicioId' THEN CALCULOS.FleteServicioId END,
		CASE WHEN @OrderBy = 'FleteServicioId DESC' THEN CALCULOS.FleteServicioId END DESC,
		CASE WHEN @OrderBy = 'Calification' THEN fs.Calification END,
		CASE WHEN @OrderBy = 'Calification DESC' THEN fs.Calification END DESC
	OFFSET @Offset ROWS FETCH NEXT @Take ROWS ONLY
 		
END";
            }
        }
