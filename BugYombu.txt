

        /// <summary>
        /// Devuelve la calificacón del cuidado
        /// </summary>
        public decimal CarefulCalificationService { get; set; }

        /// <summary>
        /// Devuelve la calificacón de la Puntualidad
        /// </summary>
        public decimal PuntualityCalificationService { get; set; }


        /// <summary>
        /// Devuelve la calificacón del cuidado
        /// </summary>
        public decimal CarefulCalificationFlete { get; set; }

        /// <summary>
        /// Devuelve la calificacón de la Puntualidad
        /// </summary>
        public decimal PuntualityCalificationFlete { get; set; }
	
	
	//CalificarModel 
	
        /// <summary>
        /// Es puntual
        /// </summary>
        [DisplayName("Puntualidad")]
        [Required]
        public bool Puntuality { get; set; }

        /// <summary>
        /// Es cuidadoso
        /// </summary>
        [DisplayName("Cuidadoso")]
        [Required]
        public bool Careful{ get; set; }
	
	
	
	
	  /// <summary>
        /// Permite 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("sendCalification")]
        public async Task<ResultBase<CalificarModel>> SendCalification(CalificarModel request)
        {
            if (request == null || string.IsNullOrEmpty(request.AccessToken) || string.IsNullOrEmpty(request.ReservationCode))
            {
                return await Task.FromResult(new ResultBase<CalificarModel>(CalificarModel.NewNotFound())
                {
                    Ok = true
                });
            }

            string code = request.ReservationCode;
            string accessToken = request.AccessToken;

            Dictionary<string, object> payload = null;
            try
            {
                payload = _accessTokenGenerator.DecodeAccessToken(code, accessToken);
                if (!payload.ContainsKey("userTicket"))
                {
                    return await Task.FromResult(new ResultBase<CalificarModel>(CalificarModel.NewNotFound()));
                }
            }
            catch(Exception ex)
            {
                return await Task.FromResult(new ResultBase<CalificarModel>(CalificarModel.NewNotFound())
                {
                    Ok = true
                });
            }

            var ticket = (string)payload["userTicket"];
            var reserva = await _reservaService.FindByCodeAsync(code, ticket);
            if (reserva == null)
            {
                // Ir a Error
                return await Task.FromResult(new ResultBase<CalificarModel>(CalificarModel.NewNotFound()));
            }
            if (reserva.UserTicket != ticket)
            {
                // Ir a Error
                return await Task.FromResult(new ResultBase<CalificarModel>(CalificarModel.NewNotFound()));
            }
            if (reserva.UsuarioCalifico == true)
            {
                // Ir a Error
                return await Task.FromResult(new ResultBase<CalificarModel>(new CalificarModel
                {
                    AccessToken = accessToken,
                    ReservationCode = code,
                    NotFound = false,
                    Calificada = true
                }));
            }

            reserva.UsuarioAbrioCalificaciones = true;
            reserva.UsuarioCalifico = true;

            var utcNow = DateTime.UtcNow;
            reserva.FechaUsuarioCalificaUTC = utcNow;
            reserva.UltimaFecUsuarioAbreCalificacionUTC = utcNow;
            reserva.ComentarioCalificacionUsuario = request.Comments;
            reserva.RatingsUsuario = request.Rating;
            reserva.CuidadoCalificacionUsuario = request.Careful;
            reserva.PuntualidadCalificacionUsuario = request.Puntuality;
            reserva.Estado = request.Estado == 1 ? Core.Entities.EstadoReserva.Realizada : Core.Entities.EstadoReserva.NoRealizada;
            await _reservaService.SaveAsync(reserva);


            return await Task.FromResult(new ResultBase<CalificarModel>(new CalificarModel
            {
                ReservationCode = code,
                AccessToken = accessToken,
                Calificada = false,
                NotFound = false
            })
            {
                Ok = true
            });
        }
    }
    
    
    
    
       /// <summary>
        /// Obtiene todos los servicios de fletes que están disponibles para los valores de filtros enviados
        /// </summary>
        /// <param name="pageRequest"></param>
        /// <returns></returns>
        public async Task<ServicioResult> GetFletes([ModelBinder(typeof(PageRequestModelBinder))] PageRequest pageRequest)
        {
            try
            {
                var mainService = await _fleteService.GetServicioByType(Core.Entities.TipoServicio.Flete);
                long mainServiceId = 0;
                if (mainService != null)
                    mainServiceId = mainService.Id;

                long peonServiceId = 0;
                int cantPeones = 0;
                if (pageRequest.Filters.ContainsKey("filter_peon"))
                {
                    if (int.TryParse(pageRequest.Filters["filter_peon"].ToString(), out cantPeones))
                    {
                        var peonService = await _fleteService.GetServicioByType(Core.Entities.TipoServicio.Peon);
                        if (mainService != null)
                            peonServiceId = peonService.Id;
                    }
                }

                BusquedaRequest busquedaRequest = new BusquedaRequest();
                busquedaRequest.ServiciosBase.Add(new ServicioCantidad { ServicioId = mainServiceId, Cantidad = 1 });
                busquedaRequest.PageIndex = pageRequest.PageIndex;
                busquedaRequest.PageSize = pageRequest.PageSize;

                if (cantPeones > 0 && peonServiceId > 0)
                {
                    busquedaRequest.ServiciosAdicionales.Add(new ServicioCantidad { ServicioId = peonServiceId, Cantidad = cantPeones });
                }

                // 
                if (pageRequest.Filters.ContainsKey("filter_desde"))
                {
                    long desde;
                    if (long.TryParse(pageRequest.Filters["filter_desde"].ToString(), out desde))
                    {
                        busquedaRequest.ZonaDesde = desde;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_hasta"))
                {
                    long hasta;
                    if (long.TryParse(pageRequest.Filters["filter_hasta"].ToString(), out hasta))
                    {
                        busquedaRequest.ZonaHasta = hasta;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_from"))
                {
                    decimal from;
                    if (decimal.TryParse(pageRequest.Filters["filter_from"].ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out from))
                    {
                        busquedaRequest.PrecioDesde = from;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_to"))
                {
                    decimal to;
                    if (decimal.TryParse(pageRequest.Filters["filter_to"].ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out to))
                    {
                        busquedaRequest.PrecioHasta = to;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_floor_from"))
                {
                    int floorFrom;
                    if (int.TryParse(pageRequest.Filters["filter_floor_from"].ToString(), out floorFrom))
                    {
                        busquedaRequest.PisosDesde = floorFrom;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_floor_to"))
                {
                    int floorTo;
                    if (int.TryParse(pageRequest.Filters["filter_floor_to"].ToString(), out floorTo))
                    {
                        busquedaRequest.PisosHasta = floorTo;
                    }
                }

                if (pageRequest.Filters.ContainsKey("filter_horario"))
                {
                    int horario;
                    if (int.TryParse(pageRequest.Filters["filter_horario"].ToString(), out horario))
                    {
                        busquedaRequest.Horario = horario;
                    }
                }


                // TODO LUCAS: Ponerlo en un metodo igual que los de arriba, refactorizar
                //busquedaRequest.OrderByPrice = int.Parse(pageRequest.Filters["filter_orderbyprice"].ToString());
                busquedaRequest.OrderBy = OrderByColumn.CalificationDesc;

                // Realiza la búsqueda
                var result = await _busquedaFleteService.FindServices(busquedaRequest);

                List<FleteViewModel> fletes = new List<FleteViewModel>();

                var numFletes = result.Result.Count;
                for (int i = 0; i < numFletes; i++)
                {
                    var flete = result.Result[i];
                    flete.CommentFlete = await _busquedaFleteService.FindComment(flete.FleteServicioId);
                    fletes.Add(new FleteViewModel
                    {
                        Id = (int)flete.FleteServicioId,
                        Title = flete.ServicioName,
                        Name = flete.FleteName,
                        Description = flete.Description,
                        CommentFlete = flete.CommentFlete,
                        Total = flete.Total,
                        TotalAdicionales = flete.TotalAdicionales,
                        TotalBase = flete.TotalBase,
                        CityName = flete.FleteCity,
                        Calification = Convert.ToInt32(flete.Calification),
                        CalificationCount = flete.CalificationCount,
                        CarefulCalification = flete.CarefulCalificationService,
                        PuntualityCalification = flete.PuntualityCalificationService,
                        Additionals = TranslateAdditionalsViewModel(flete.Adicionales),
                        Image = TranslateImageFleteServicioViewModel(flete.Imagenes),
                        HoraMinima = Convert.ToInt32(flete.HoraMinima)
                    });
                }

                return await Task.FromResult(new ServicioResult(fletes)
                {
                    PageIndex = 1, // TODO: Completar con el número de página que corresponda
                    PageSize = pageRequest.PageSize,
                    Total = result.Total,
                    PrecioDesde = result.PrecioDesde,
                    PrecioHasta = result.PrecioHasta,
                    PrecioMaximo = result.PrecioMaximo,
                    PrecioMinimo = result.PrecioMinimo
                });
            }
            catch (Exception ex)
            {

                throw;
            }
          
        }
